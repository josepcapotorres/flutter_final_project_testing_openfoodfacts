name: Android testers CD AppDistribution apk

on:
  workflow_run:
    workflows: ["Android testers CI"] # Nombre exacto
    types: [completed]
    branches: [testers]
  
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run testers CD manually'
        required: true
        default: 'testers'
jobs:
  build_and_deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}
      - uses: subosito/flutter-action@v2
      - name: Cleaning Flutter's build cache
        run: flutter clean
      - name: Installing dependencies
        run: flutter pub get
      - name: Decode keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/my-release-key.jks
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=my-release-key.jks" >> android/key.properties
      - name: Extract app version
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Versión detectada: $VERSION"
      - name: Create google-services.json (Android)
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/app/google-services.json
      - name: Create Google PLIST (iOS)
        run: |
          mkdir -p ios/Runner
          echo "${{ secrets.GOOGLE_PLIST }}" > ios/Runner/GoogleService-Info.plist
      - name: Create firebase.json
        run: |
          echo "${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}" > firebase.json
      - name: Building apk in release mode
        run: |
          flutter build apk --release \
            --dart-define=APP_NAME="OpenFoodFacts testing Testers"
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Activate Service Account for GCloud/Firebase
        run: |
          SERVICE_ACCOUNT_FILE="firebase-sa-key.json"
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > $SERVICE_ACCOUNT_FILE

          # Autenticación de gcloud con la cuenta de servicio
          gcloud auth activate-service-account --key-file=$SERVICE_ACCOUNT_FILE --project=${{secrets.FIREBASE_PROJECT_ID}}
          gcloud config set project ${{ secrets.FIREBASE_PROJECT_ID }}
      - name: Uploading to Firebase App Distribution
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/firebase-sa-key.json
        run: |
          # Distribution
          firebase appdistribution:distribute build/app/outputs/flutter-apk/openfoodfacts_testers_${{steps.version.outputs.VERSION}}.apk \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups testers \
            --debug
      - name: Cleaning .jks and key.properties files
        run: |
          rm android/app/my-release-key.jks
          rm android/key.properties
      - name: Clean up Firebase credentials
        run: rm ${{ runner.temp }}/firebase-sa-key.json